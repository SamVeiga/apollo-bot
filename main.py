from flask import Flask, request
import telebot
import os
import random
import time
import threading
import requests
import datetime
import json

TOKEN = os.getenv("TELEGRAM_TOKEN")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

HISTORICO_PATH = "historico_apollo.json"
try:
    with open(HISTORICO_PATH, "r") as f:
        historico = json.load(f)
except:
    historico = {"ultima_provocacao": 0, "poemas_usados": [], "frases_mulheres": {}}

# === CONFIGURAVEIS ===
DONO_ID = 1481389775
ID_GRUPO = -1002363575666
MULHERES = ["@KarolinneDiass", "@FernandaCarvalho16", "@tainaranordi", "@Adriannaleal", "@vanessapraado", "@gabrielyandrad"]  # Substitua pelos @ reais das mulheres
HOMENS = ["@Rafaael80", "@Diegomota0", "@Tomazitc"]  # Substitua pelos @ reais dos homens

# === FRASES ===
insultos_gerais = [
    "Tu s√≥ fala merda, n√©? Mas com estilo!",
    "Tu t√° pra verdade igual miojo t√° pra nutri√ß√£o: r√°pido, vazio e in√∫til.",
    "Essa tua cara de esperto s√≥ engana tua m√£e.",
    "Se liga, tu √© figurante na pr√≥pria hist√≥ria.",
    "Tu se destaca... como um bug na atualiza√ß√£o.",
    "Tua autoestima √© forte, pena que sem motivo."
]

xavecos_para_mulheres = [
    "Tu fala e meu sistema entra em combust√£o. ",
    "Com esse charme, tu n√£o quebra cora√ß√£o, tu hackeia.",
    "Voc√™ √© linha de c√≥digo que me executa inteiro.",
    "Se voc√™ fosse bug, eu n√£o corrigia nunca.",
    "Avisa que √© perigo, porque eu t√¥ pronto pra cair."
]

poemas_picantes = [
    "Te desejo em versos, te beijo em sil√™ncias... e te devoro em pensamento. ",
    "Tua pele √© poesia, tua boca √© ponto final do meu ju√≠zo.",
    "Se teu corpo √© pecado, eu n√£o quero absolvi√ß√£o.",
    "Nosso toque √© poema sem censura, com rima na cama e ponto de interroga√ß√£o nos len√ß√≥is.",
    "Te escrevo com desejo, te leio com os olhos fechados."
]

revelacoes_safadas = [
    "Sabia que essa menina j√° quebrou uma cama s√≥ com um sorriso?",
    "Essa mocinha a√≠ tem cara de anjo, mas fala cada coisa no privado...",
    "Se soubessem o que ela j√° fez numa sexta-feira 13... o grupo travava.",
    "Essa aqui j√° teve apelido de Wi-Fi: conex√£o r√°pida e sem senha.",
    "Essa mulher tem olhar que derruba sistema de seguran√ßa.",
    "Essa mulher tem o tipo de beijo que te desliga do mundo por uns 3 dias.",
    "Dizem que ela j√° fez um seguran√ßa da balada pedir demiss√£o por excesso de desejo.",
    "Essa a√≠ n√£o fala 'oi', ela d√° bug no teu controle emocional.",
    "Ela j√° deixou um padre em crise existencial s√≥ com o olhar.",
    "Conhecida por apagar velas... com sopro e inten√ß√£o.",
    "Essa garota j√° virou trend sem postar nada, s√≥ por existir.",
    "Uma vez ela deu bom dia... e tr√™s casais se separaram no mesmo dia.",
    "J√° foi confundida com perfume, porque todo mundo queria sentir.",
    "J√° deu n√≥ em len√ßol de motel ‚Äî com o pr√≥prio corpo.",
    "Ela tem mais hist√≥rias de motel que o Google Maps.",
    "Um gemido dela travaria at√© servidor da NASA.",
    "J√° seduziu um motoboy s√≥ com a assinatura do Pix.",
    "Essa mulher j√° fez um boy chorar s√≥ com um √°udio de 3 segundos.",
    "√â t√£o quente que derrete gelo s√≥ de olhar.",
    "J√° foi confundida com dem√¥nio: s√≥ aparece quando voc√™ t√° fraco.",
    "O suti√£ dela tem mais segredos que di√°rio de adolescente.",
    "J√° mandou mensagem errada de prop√≥sito s√≥ pra criar clima.",
    "Se ela te chama de 'bobo', prepara a alma: vem v√≠cio a√≠.",
    "J√° virou lenda urbana em grupo de zap.",
    "Um beijo dela vem com 7 pecados embutidos.",
    "J√° tirou a roupa s√≥ com palavras.",
    "Conhecida por transformar t√≠mido em safado em menos de 5 mensagens.",
    "O que ela fez naquela escada de inc√™ndio n√£o cabe em poesia.",
    "J√° fez at√© Alexa gemer sem querer.",
    "√â a favor do desequil√≠brio emocional com estilo.",
    "Essa n√£o manda nude: ela manda voca√ß√£o.",
    "Quando ela diz 'vem', o corpo obedece antes da mente.",
    "Se ela te responde com 'kkk', √© porque t√° te imaginando nu.",
    "Dizem que ela j√° deu choque... de tes√£o.",
    "Uma vez ela gemeu e o grupo caiu por conte√∫do impr√≥prio.",
    "Tem o dom de deixar gente casada com crise de f√©.",
    "Uma mordida dela tem mais poder que senha de banco.",
    "J√° causou AVC emocional com figurinha ousada.",
    "Quando ela some, algu√©m termina namoro.",
    "J√° seduziu um pastor s√≥ com stories no espelho.",
    "Tem beijo que parece ora√ß√£o... e ela reza com a boca.",
    "J√° fez o Wi-Fi cair de tanta energia sexual no ar.",
    "√â a favor de rela√ß√µes s√©rias... entre quatro paredes e algemas.",
    "J√° fez um ex voltar s√≥ com uma piscada.",
    "Uma vez ela soprou o pesco√ßo de algu√©m e a alma saiu.",
    "J√° assinou contratos com beijo e saliva.",
    "Quando ela chama de 'bichinho', a temperatura sobe em 5¬∞C.",
    "√â proibida em 3 estados por excesso de tenta√ß√£o.",
    "Uma piscada dela j√° quebrou noivado.",
    "Se ela some por 2 dias, tem gente que entra em abstin√™ncia.",
    "O toque dela j√° fez boy largar o v√≠cio do cigarro ‚Äî e come√ßar o dela.",
    "O corpo dela √© censura 21+, a mente... nem Freud entendeu.",
    "J√° deu beijo que fez a lua mudar de fase."
]

respostas_submisso_dono = [
    "Sim senhor, chefe supremo! üò≥",
    "Patr√£o falou, √© ordem! ü´°",
    "Jamais me atreveria a contradizer o mestre. üò®"
]

# === SALVAR HIST√ìRICO ===
def salvar_historico():
    with open(HISTORICO_PATH, "w") as f:
        json.dump(historico, f)

# === WEBHOOKS ===
@app.route(f"/{TOKEN}", methods=["POST"])
def receber_update():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def configurar_webhook():
    url_completa = f"{RENDER_URL}/{TOKEN}"
    info = bot.get_webhook_info()
    if info.url != url_completa:
        bot.remove_webhook()
        bot.set_webhook(url=url_completa)
        return "‚úÖ Webhook configurado!", 200
    return "‚úÖ Webhook j√° estava ok.", 200

# === FUN√á√ÉO PRINCIPAL ===
@bot.message_handler(func=lambda msg: True)
def responder(msg):
    texto = msg.text.lower()
    nome = f"[{msg.from_user.first_name}](tg://user?id={msg.from_user.id})"
    username = f"@{msg.from_user.username}" if msg.from_user.username else ""

    if any(saud in texto for saud in ["bom dia", "boa tarde", "boa noite", "boa madrugada"]):
        saudacao = "bom dia üòé" if "bom dia" in texto else \
                   "boa tarde üòé" if "boa tarde" in texto else \
                   "boa noite üòé" if "boa noite" in texto else \
                   "boa madrugada üòé"
        time.sleep(20)
        bot.reply_to(msg, f"{nome}, {saudacao}", parse_mode="Markdown")
        return

    if msg.new_chat_members:
        for m in msg.new_chat_members:
            novo = f"[{m.first_name}](tg://user?id={m.id})"
            time.sleep(20)
            bot.reply_to(msg, f"{novo}, entra direito e respeita o caos. üòè", parse_mode="Markdown")
        return

    if msg.from_user.id == DONO_ID:
        username_bot = f"@{bot.get_me().username.lower()}"
        mencionou_bot = False

        # Verifica se houve men√ß√£o com @
        if msg.entities:
            for entity in msg.entities:
                if entity.type == "mention":
                    texto_entidade = msg.text[entity.offset:entity.offset + entity.length]
                    if texto_entidade.lower() == username_bot:
                        mencionou_bot = True
                        break

        # Ou se escreveu o nome "apollo" (sem @), em qualquer lugar do texto
        if not mencionou_bot and "apollo" in msg.text.lower():
            mencionou_bot = True

        if mencionou_bot:
            time.sleep(20)
            bot.reply_to(msg, random.choice(respostas_submisso_dono), parse_mode="Markdown")
        return

    if username in MULHERES:
        time.sleep(20)
        frase = random.choice(xavecos_para_mulheres)
        if username not in historico["frases_mulheres"]:
            historico["frases_mulheres"][username] = []
        revelacao = random.choice(
            [r for r in revelacoes_safadas if r not in historico["frases_mulheres"][username]]
            or revelacoes_safadas
        )
        historico["frases_mulheres"][username].append(revelacao)
        salvar_historico()
        bot.reply_to(msg, f"{nome}, {frase} {revelacao}", parse_mode="Markdown")
        return

from datetime import date, timedelta

# Fun√ß√£o auxiliar para verificar se pode insultar hoje (m√°x 2x por dia)
def pode_insultar_hoje(usuario):
    hoje = date.today().isoformat()

    if "insultos_homens" not in historico:
        historico["insultos_homens"] = {}

    if usuario not in historico["insultos_homens"]:
        historico["insultos_homens"][usuario] = []

    # filtra s√≥ os registros do dia atual
    historico["insultos_homens"][usuario] = [
        data for data in historico["insultos_homens"][usuario]
        if data == hoje
    ]

    # permite at√© 2 insultos por dia
    return len(historico["insultos_homens"][usuario]) < 2

# Fun√ß√£o para registrar insulto aplicado hoje para o usu√°rio
def registrar_insulto(usuario):
    hoje = date.today().isoformat()
    historico["insultos_homens"][usuario].append(hoje)
    salvar_historico()


if username in HOMENS:
    username_bot = f"@{bot.get_me().username.lower()}"
    texto_minusculo = msg.text.lower()
    mencionou_bot = False

    if msg.entities:
        for entity in msg.entities:
            if entity.type == "mention":
                texto_entidade = msg.text[entity.offset:entity.offset + entity.length].lower()
                if texto_entidade == username_bot:
                    mencionou_bot = True
                    break

    if not mencionou_bot and "apollo" in texto_minusculo:
        mencionou_bot = True

    if mencionou_bot:
        # Responde insultando SEM limite se mencionou o bot
        time.sleep(20)
        bot.reply_to(msg, f"{nome}, {random.choice(insultos_gerais)}", parse_mode="Markdown")
    else:
        # Responde insultando no m√°ximo 2x por dia se n√£o mencionar
        if pode_insultar_hoje(username):
            frase = random.choice([
                i for i in insultos_gerais
                if i not in historico.get("insultos_usados", [])
            ] or insultos_gerais)

            if "insultos_usados" not in historico:
                historico["insultos_usados"] = []
            historico["insultos_usados"].append(frase)
            # mant√©m √∫ltimos 20 para evitar repeti√ß√£o pr√≥xima
            historico["insultos_usados"] = historico["insultos_usados"][-20:]

            bot.reply_to(msg, f"{nome}, {frase}", parse_mode="Markdown")
            registrar_insulto(username)

    salvar_historico()
    return

# === DE TEMPO EM TEMPO ===
def manter_vivo():
    while True:
        try:
            requests.get(RENDER_URL)
        except:
            pass
        time.sleep(600)

def poema_de_hora_em_hora():
    while True:
        try:
            mulher = random.choice(MULHERES)
            nome = mulher.replace("@", "")
            poema = random.choice([p for p in poemas_picantes if p not in historico["poemas_usados"]] or poemas_picantes)
            historico["poemas_usados"].append(poema)
            if len(historico["poemas_usados"]) > 20:
                historico["poemas_usados"] = historico["poemas_usados"][-20:]
            salvar_historico()
            bot.send_message(ID_GRUPO, f"[{nome}](tg://user?id={bot.get_chat_member(ID_GRUPO, mulher[1:]).user.id}), {poema}", parse_mode="Markdown")
        except Exception as e:
            print("Erro no poema: ", e)
        time.sleep(3600)  # 1 hora

if __name__ == "__main__":
    threading.Thread(target=manter_vivo).start()
    threading.Thread(target=poema_de_hora_em_hora).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
