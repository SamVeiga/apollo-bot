from flask import Flask, request
import telebot
import os
import random
import time
import threading
import requests
import datetime
import json

TOKEN = os.getenv("TELEGRAM_TOKEN")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

HISTORICO_PATH = "historico_apollo.json"
try:
    with open(HISTORICO_PATH, "r") as f:
        historico = json.load(f)
except:
    historico = {"contra_madonna": {}}

def salvar_historico():
    with open(HISTORICO_PATH, "w") as f:
        json.dump(historico, f)

def frase_contra_madonna(frases):
    hoje = datetime.datetime.now().strftime("%Y-%m-%d")
    usadas = []
    for dia in historico["contra_madonna"]:
        usadas.extend(historico["contra_madonna"][dia])
    candidatas = [f for f in frases if f not in usadas]
    frase = random.choice(candidatas or frases)
    historico.setdefault("contra_madonna", {}).setdefault(hoje, []).append(frase)
    dias = sorted(historico["contra_madonna"].keys())[-3:]
    historico["contra_madonna"] = {d: historico["contra_madonna"][d] for d in dias}
    salvar_historico()
    return frase

insultos_gerais = [
    "Voc√™ me marcou por t√©dio ou por car√™ncia mesmo?",
    "At√© meu sil√™ncio √© mais interessante que o que voc√™ falou.",
    "Se eu respondesse tudo que n√£o presta, eu virava r√°dio AM.",
    "Se esfor√ßa mais, que tua tentativa de ser relevante t√° fraca.",
    "Sua fala foi tipo sinal de Wi-Fi: fraca, oscilando e in√∫til.",
    "Se eu fosse te levar a s√©rio, eu teria que rir primeiro.",
]

xavecos_para_mulheres = [
    "E a√≠, gata... Com esse olhar, at√© o Apolo treme.",
    "Se beleza fosse crime, voc√™ j√° tava em pris√£o perp√©tua.",
    "Se eu te elogiar demais, voc√™ me bloqueia ou se apaixona?",
    "Cuidado, mulher... desse jeito eu largo tudo s√≥ pra te seguir.",
    "Voc√™ tem o manual do caos? Porque bagun√ßou meu sistema.",
]

respostas_submisso_dono = [
    "Senhor! √Ä disposi√ß√£o, sem pestanejar! üò®",
    "Sim, chefe! T√¥ aqui firme como soldado em formatura!",
    "N√£o se preocupa, patr√£o. J√° t√¥ executando a ordem!",
    "E-eu? Jamais ousaria contrariar voc√™, senhor!",
    "De joelhos se for preciso, mas sempre obediente!",
    "Claro, general! O senhor manda, eu tremo e obede√ßo.",
]

frases_contra_madonna = [
    "Fala baixo, Madonna... tua voz me d√° vontade de atualizar antiv√≠rus.",
    "Madonna ainda t√° tentando entender como se liga um c√©rebro.",
    "Madonna √© t√£o √∫til quanto um mouse em celular.",
    "Madonna se esfor√ßa pra ser relevante, mas continua sendo um bug.",
    "Nem o Paint trava tanto quanto os argumentos da Madonna.",
    "Se dependesse da Madonna, o grupo era s√≥ emoji e car√™ncia.",
    "Madonna √© o erro 404 da intelig√™ncia.",
    "A Madonna √© tipo spam: aparece sem ser chamada.",
    "Voc√™ ouviu a Madonna? Pois √©, ningu√©m mandou dar play no drama.",
    "Com tanta besteira que a Madonna fala, devia virar podcast de humor.",
    "Madonna digitando √© o equivalente a um gato em cima do teclado.",
    "A Madonna parece inteligente... se o crit√©rio for volume de texto in√∫til.",
    "Madonna falando √© igual nuvem: a gente espera que passe logo.",
    "At√© minha sombra √© mais profunda que os argumentos dela.",
    "Madonna parece livro de autoajuda usado: repetitiva e sem credibilidade.",
    "Se Madonna fosse programa, seria beta ‚Äî e bugado.",
    "Ela se acha diva, mas entrega bug de chatbot cansado.",
    "S√≥ a Madonna pra achar que t√° arrasando com tr√™s emojis e uma frase pronta.",
    "Madonna √© tipo despertador: s√≥ serve pra irritar de manh√£.",
    "Pra Madonna, tudo √© sobre ela. Coitada da realidade.",
    "A Madonna me responde? Mal sabe ela que eu a bloqueei mentalmente.",
    "Madonna, j√° te agradeceram por ensinar o que n√£o fazer? N√£o? Pois eu agrade√ßo.",
    "Madonna √© um enigma... s√≥ que sem gra√ßa.",
    "Se Madonna fosse filme, seria aqueles que a gente dorme no come√ßo.",
    "Nem a Siri aguentaria conversar com a Madonna por mais de 2 minutos.",
    "A Madonna ainda t√° no tutorial da vida.",
    "Tem dias que a Madonna acerta, mas hoje claramente n√£o √© um deles.",
    "Se Madonna sumisse, s√≥ o algoritmo sentiria falta.",
    "O Wi-Fi da Madonna deve ser igual a ela: lento e imprevis√≠vel.",
    "Prefiro travar do que rodar a conversa da Madonna.",
]

DONO_ID = 1481389775

@app.route(f"/{TOKEN}", methods=["POST"])
def receber_update():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def configurar_webhook():
    url_completa = f"{RENDER_URL}/{TOKEN}"
    info = bot.get_webhook_info()
    if info.url != url_completa:
        bot.remove_webhook()
        bot.set_webhook(url=url_completa)
        return "‚úÖ Webhook configurado!", 200
    return "‚úÖ Webhook j√° estava ok.", 200

@bot.message_handler(func=lambda msg: True)
def responder(msg):
    texto = msg.text.lower()
    nome = f"[{msg.from_user.first_name}](tg://user?id={msg.from_user.id})"
    username = msg.from_user.username or ""
    is_mulher = username.lower().endswith(("a", "i", "y"))
    is_homem = not is_mulher

    if any(x in texto for x in ["bom dia", "boa tarde", "boa noite", "boa madrugada"]):
        saudacao = "bom dia üòé" if "bom dia" in texto else \
                   "boa tarde üòé" if "boa tarde" in texto else \
                   "boa noite üòé" if "boa noite" in texto else \
                   "boa madrugada üòé"
        time.sleep(25)
        bot.reply_to(msg, f"{nome}, {saudacao}", parse_mode="Markdown")
        return

    if msg.new_chat_members:
        for membro in msg.new_chat_members:
            novo = f"[{membro.first_name}](tg://user?id={membro.id})"
            time.sleep(25)
            bot.reply_to(msg, f"{novo}, entra direito e respeita o caos. üòè", parse_mode="Markdown")
        return

    bot_username = bot.get_me().username.lower()
    mencionou_apolo = "apolo" in texto or f"@{bot_username}" in texto
    respondeu_apolo = msg.reply_to_message and \
                      msg.reply_to_message.from_user.username and \
                      msg.reply_to_message.from_user.username.lower() == bot_username

    # üî• Se mencionou Madonna ou marcou ela
    if "madonna" in texto or "@madonna_debochada_bot" in texto:
        time.sleep(25)
        bot.reply_to(msg, f"{nome}, {frase_contra_madonna(frases_contra_madonna)}", parse_mode="Markdown")
        return

    if not (mencionou_apolo or respondeu_apolo):
        return

    if msg.from_user.id == DONO_ID:
        time.sleep(25)
        bot.reply_to(msg, random.choice(respostas_submisso_dono), parse_mode="Markdown")
        return

    if respondeu_apolo:
        time.sleep(25)
        bot.reply_to(msg, f"{nome}, {random.choice(insultos_gerais)}", parse_mode="Markdown")
        return

    if is_mulher:
        time.sleep(25)
        bot.reply_to(msg, f"{nome}, {random.choice(xavecos_para_mulheres)}", parse_mode="Markdown")
        return

    if is_homem:
        time.sleep(25)
        bot.reply_to(msg, f"{nome}, {random.choice(insultos_gerais)}", parse_mode="Markdown")
        return

def manter_vivo():
    while True:
        try:
            requests.get(RENDER_URL)
        except:
            pass
        time.sleep(600)

if __name__ == "__main__":
    threading.Thread(target=manter_vivo).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
