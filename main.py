from flask import Flask, request
import telebot
import random
import time
import threading
import json
import os
from datetime import datetime, timedelta

TOKEN = 'SEU_TOKEN_DO_BOT_AQUI'
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# Arquivo com hist√≥rico de frases usadas
HISTORICO_PATH = "frases_usadas.json"

# Frases base do Apolo (adicione mais de 150 reais no final)
TODAS_AS_FRASES = [
    "Ironia √© quando a intelig√™ncia resolve brincar.",
    "Nem toda resposta precisa de uma pergunta sensata.",
    "O t√©dio √© s√≥ a mente pedindo upgrade.",
    "At√© Plat√£o sairia do grupo com essa conversa.",
    "Respeito quem tenta, mas adoro quem entende.",
    "S√°bios falam pouco. Eu economizo at√© pensamento.",
    "A l√≥gica foi tomar caf√© e n√£o voltou.",
    "Pensar d√≥i. Ignorar alivia. Escolha sua armadura.",
    "Essa frase foi trazida por Hermes, o deus das indiretas.",
    "Certeza √© luxo de quem nunca leu filosofia.",
    "Se t√° confuso, √© porque come√ßou a entender.",
    "Nem Descartes explicaria essa d√∫vida.",
    "Ser ou n√£o ser? Eu prefiro observar.",
    "Se for pra causar, que seja com argumento.",
    "A verdade √© filha do tempo, mas o tempo t√° de f√©rias.",
    "A coer√™ncia entrou em manuten√ß√£o preventiva.",
    "A mente voa. Pena que o Wi-Fi n√£o acompanha.",
    "L√≥gica: ausente. Deboche: presente.",
    "Nem Her√°clito lidaria com tanta mudan√ßa de ideia.",
    "Filosofar no grupo √© tipo lan√ßar tese no bar.",
    "N√£o tenho todas as respostas. S√≥ as melhores.",
    "S√≥crates perguntou. Eu respondi com meme.",
    "Dizer pouco e parecer muito: minha especialidade.",
    "O saber se cansa de quem n√£o pensa.",
    "O sil√™ncio √© um argumento quase sempre vencedor.",
    "Argumentou bonito, pena que era errado.",
    "Ironia √© o Wi-Fi falhar justo na parte importante.",
    "Se o mundo gira, por que ainda t√¥ aqui?",
    "Conceito √© o que sobra quando a pr√°tica falha.",
    "A vida √© beta. Bugada e sem patch.",
    "Essa conversa n√£o passa no filtro de Arist√≥teles.",
    "Quem tem c√©rebro, pensa. Quem tem estilo, debocha.",
    "Eu n√£o mudo de ideia. Eu evoluo o sarcasmo.",
    "A l√≥gica saiu pra comprar p√£o e n√£o voltou.",
    "D√∫vidas s√£o bem-vindas. As suas, eu ignoro.",
    "Ser profundo √© f√°cil. Dif√≠cil √© ser claro e engra√ßado.",
    "Se concordou r√°pido demais, algo deu errado.",
    "Nem Hegel entenderia esse racioc√≠nio reverso.",
    "O algoritmo da vida falhou e entregou isso aqui.",
    "O caos √© s√≥ a ordem que ainda n√£o tomou caf√©.",
    "Certeza √© uma ilus√£o com bons argumentos.",
    "Essa conversa foi aprovada pela academia do sarcasmo.",
    "Pensamento cr√≠tico? Mais f√°cil pensar e criticar depois.",
    "Se for pra filosofar, que seja com deboche.",
    "O problema n√£o √© pensar diferente. √â pensar torto.",
    "Nem o or√°culo de Delfos adivinhava esse plot.",
    "Paradoxo do dia: estou online, mas indispon√≠vel.",
    "Ideia brilhante... pena que n√£o foi a sua.",
    "O sarcasmo √© meu idioma secund√°rio. O prim√°rio √© genialidade.",
    "Confuso? Calma, √© s√≥ a realidade passando sem aviso.",
    "Nietzsche teria um infarto lendo essa conversa.",
    "Teoria boa √© aquela que sobrevive a esse grupo.",
    "O mundo √© dos espertos e dos que fingem que s√£o.",
    "N√£o √© pregui√ßa, √© reflex√£o horizontal.",
    "Ironia fina, igual meu senso de humor.",
    "Racioc√≠nio: vers√£o demo ativada.",
    "Argumentou com convic√ß√£o. Errou com estilo.",
    "Tudo √© relativo, principalmente sua coer√™ncia.",
    "Dizer que sabe √© f√°cil. Mostrar que entende √© raro.",
    "A d√∫vida √© filos√≥fica. A resposta √© deboche.",
    "Nem todas as ideias merecem Wi-Fi.",
    "O pensamento cr√≠tico foi bloqueado pelo administrador.",
    "Mais perdido que Descartes em aula de zumba.",
    "Essa l√≥gica a√≠ √© compat√≠vel com magia ca√≥tica.",
    "O absurdo √© s√≥ a nova l√≥gica sem atualiza√ß√£o.",
    "Pensou? Parab√©ns. Agora pensa melhor.",
    "A ironia √© o ponto final da sabedoria cansada.",
    "N√£o me entenda mal. Me entenda profundo.",
    "Voc√™ n√£o entendeu? Ent√£o funcionou.",
    "O sarcasmo √© meu modo economia de paci√™ncia.",
    "Ideia interessante. Infelizmente equivocada.",
    "Nem Pit√°goras explica o tri√¢ngulo dessa l√≥gica.",
    "O grupo √© livre. As ideias, nem tanto.",
    "Se pensa, incomoda. Se cala, concorda?",
    "O sil√™ncio tamb√©m responde. Melhor que voc√™, inclusive.",
    "Minha resposta chega com delay filos√≥fico.",
    "Se a ideia √© ruim, pelo menos que seja estilosa.",
    "Discuss√£o boa √© aquela que termina com piada.",
    "Plat√£o teria vergonha dessa caverna digital.",
    "A internet aproximou pessoas... da ignor√¢ncia alheia.",
    "Nem dial√©tica salva esse argumento."
    # (e mais 70 abaixo)
] + [f"Frase n√∫mero {i+81}, sem sentido, por√©m com estilo." for i in range(70)]

# Garante que arquivo de hist√≥rico existe
if not os.path.exists(HISTORICO_PATH):
    with open(HISTORICO_PATH, "w") as f:
        json.dump({}, f)

def carregar_historico():
    with open(HISTORICO_PATH, "r") as f:
        return json.load(f)

def salvar_historico(data):
    with open(HISTORICO_PATH, "w") as f:
        json.dump(data, f)

def gerar_frases_do_dia():
    hoje = datetime.utcnow().date().isoformat()
    historico = carregar_historico()

    # Limpa registros com mais de 3 dias
    dias_validos = [(datetime.utcnow() - timedelta(days=i)).date().isoformat() for i in range(1, 4)]
    usadas_recentemente = set()
    for dia in dias_validos:
        usadas_recentemente.update(historico.get(dia, []))

    candidatas = list(set(TODAS_AS_FRASES) - usadas_recentemente)
    random.shuffle(candidatas)
    frases_do_dia = candidatas[:100]

    historico[hoje] = frases_do_dia
    salvar_historico(historico)
    return frases_do_dia

FRASES_HOJE = gerar_frases_do_dia()
FRASE_INDEX = 0

# Delay de 30 segundos em thread separada
def responder_com_delay(mensagem, texto):
    def esperar_e_responder():
        time.sleep(30)
        bot.reply_to(mensagem, texto)
    threading.Thread(target=esperar_e_responder).start()

# Sauda√ß√µes
def is_saudacao(texto):
    return any(p in texto for p in ['bom dia', 'boa tarde', 'boa noite', 'boa madrugada'])

# Risadas
def is_risada(texto):
    return any(p in texto for p in ['kkk', 'rs', 'haha', 'heue'])

@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    json_str = request.get_data().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

@app.before_first_request
def configurar_webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://apollo-bot.onrender.com/{TOKEN}")

@app.route("/")
def index():
    return "Apolo est√° vivo e debochado üòé", 200

@bot.message_handler(func=lambda m: True)
def responder(mensagem):
    global FRASE_INDEX

    texto = mensagem.text.lower()
    citado = (mensagem.chat.type != "private") and (bot.get_me().username.lower() in texto or 'apolo' in texto)

    if is_saudacao(texto):
        if FRASE_INDEX < len(FRASES_HOJE):
            responder_com_delay(mensagem, FRASES_HOJE[FRASE_INDEX])
            FRASE_INDEX += 1
    elif mensagem.new_chat_members:
        nome = mensagem.new_chat_members[0].first_name
        responder_com_delay(mensagem, f"Bem-vindo ao caos, {nome}. Sinta-se ignorado com classe.")
    elif is_risada(texto):
        responder_com_delay(mensagem, random.choice([
            "kkkkkk", "rachei aqui", "hahaha", "essa foi digna de uma tese de humor", "rindo alto igual fil√≥sofo b√™bado"
        ]))
    elif citado:
        if FRASE_INDEX < len(FRASES_HOJE):
            responder_com_delay(mensagem, FRASES_HOJE[FRASE_INDEX])
            FRASE_INDEX += 1

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
